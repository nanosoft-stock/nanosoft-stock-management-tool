// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/data/local_database/models/category_objectbox_model.dart';
import 'core/data/local_database/models/input_fields_objectbox_model.dart';
import 'core/data/local_database/models/product_objectbox_model.dart';
import 'core/data/local_database/models/stock_location_history_objectbox_model.dart';
import 'core/data/local_database/models/stock_objectbox_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 115768193643236440),
      name: 'CategoryModel',
      lastPropertyId: const obx_int.IdUid(4, 8748949600333974867),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2247178619311132399), name: 'id', type: 6, flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2713008352137297076), name: 'category', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8649976572082106997), name: 'ref', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8748949600333974867), name: 'updateTime', type: 10, flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4498366187129196935),
      name: 'InputFieldsModel',
      lastPropertyId: const obx_int.IdUid(13, 3745156033302547545),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 202435983539514328), name: 'id', type: 6, flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8355494844896868735), name: 'field', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5431476710661053420), name: 'datatype', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3539373982214706512), name: 'category', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4470135786161090218), name: 'isWithSKU', type: 1, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6739491182670368323),
            name: 'isTitleCase',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6283435366312830352), name: 'isBg', type: 1, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8346731166956904133), name: 'lockable', type: 1, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3715218025783938920), name: 'order', type: 6, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4513509928408335197), name: 'items', type: 30, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5423410102377221427), name: 'textValue', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 388221934445529623), name: 'locked', type: 1, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3745156033302547545),
            name: 'updateTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4941576589595947486),
      name: 'ProductModel',
      lastPropertyId: const obx_int.IdUid(19, 2508515853086180317),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5274888884826195896), name: 'id', type: 6, flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8777189826031002536), name: 'category', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 738290895404256581), name: 'sku', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6330953894352556664), name: 'make', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8392276463018327300), name: 'model', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8500910074651380537), name: 'processor', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2880259993092890974), name: 'ram', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6935748556222125260), name: 'storage', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3262062846147267361),
            name: 'screenResolution',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5329897367482510061), name: 'os', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 662767557113346718), name: 'screenSize', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4736497072061183312), name: 'usbC', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1271629750915986512), name: 'hdmi', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3257516387398194714),
            name: 'displayPort',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 9176844804407090362), name: 'vga', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 6067529247810517105), name: 'ethernet', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4538766512240501477), name: 'usbA', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 3935932613264492070), name: 'type', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2508515853086180317),
            name: 'updateTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4006601827538858093),
      name: 'StockLocationHistoryModel',
      lastPropertyId: const obx_int.IdUid(7, 1901759616111056195),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 301330922450907131), name: 'id', type: 6, flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8435503500090402605), name: 'date', type: 10, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 68093823571291223), name: 'itemId', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3282212939916168277),
            name: 'containerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4994565927406361783),
            name: 'warehouseLocation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6183930038347003600), name: 'comments', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1901759616111056195), name: 'staff', type: 9, flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 1822525163420425049),
      name: 'StockModel',
      lastPropertyId: const obx_int.IdUid(29, 4244842460663819587),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5882788199714033951), name: 'id', type: 6, flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1227644137036014803), name: 'date', type: 10, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4136787169351185914), name: 'category', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1790521698418551855), name: 'itemId', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8199663530700390218),
            name: 'serialNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3006258940614161502), name: 'sku', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 313382672128181047), name: 'make', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 480764611909005632), name: 'model', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2612476791207485515), name: 'processor', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2188153453481376796), name: 'ram', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2989890264290627151), name: 'storage', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8688039732898311962),
            name: 'screenResolution',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4703379804524044207), name: 'os', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8764344677090561810),
            name: 'screenSize',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3019417299759924292), name: 'usbC', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 3163158103847927562), name: 'hdmi', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2699716490522283531),
            name: 'displayPort',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 9204905606121712460), name: 'vga', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 8153688700414077519), name: 'ethernet', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3219585842847679378), name: 'usbA', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 9212589769775811006), name: 'type', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 8843852649042032310),
            name: 'supplierInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 4346226259510496964),
            name: 'dispatchInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 6219449817307617880),
            name: 'containerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 8500558903919383482),
            name: 'warehouseLocation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 8320200346754956927), name: 'comments', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 541858986232586884), name: 'staff', type: 9, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 4231092600033086896), name: 'archived', type: 1, flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 4244842460663819587),
            name: 'updateTime',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 1822525163420425049),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CategoryObjectBoxModel: obx_int.EntityDefinition<CategoryObjectBoxModel>(
        model: _entities[0],
        toOneRelations: (CategoryObjectBoxModel object) => [],
        toManyRelations: (CategoryObjectBoxModel object) => {},
        getId: (CategoryObjectBoxModel object) => object.id,
        setId: (CategoryObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryObjectBoxModel object, fb.Builder fbb) {
          final categoryOffset = object.category == null ? null : fbb.writeString(object.category!);
          final refOffset = object.ref == null ? null : fbb.writeString(object.ref!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.addOffset(2, refOffset);
          fbb.addInt64(3, object.updateTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updateTimeValue = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final refParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final updateTimeParam =
              updateTimeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(updateTimeValue);
          final object = CategoryObjectBoxModel(
              id: idParam, category: categoryParam, ref: refParam, updateTime: updateTimeParam);

          return object;
        }),
    InputFieldsObjectBoxModel: obx_int.EntityDefinition<InputFieldsObjectBoxModel>(
        model: _entities[1],
        toOneRelations: (InputFieldsObjectBoxModel object) => [],
        toManyRelations: (InputFieldsObjectBoxModel object) => {},
        getId: (InputFieldsObjectBoxModel object) => object.id,
        setId: (InputFieldsObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (InputFieldsObjectBoxModel object, fb.Builder fbb) {
          final fieldOffset = object.field == null ? null : fbb.writeString(object.field!);
          final datatypeOffset = object.datatype == null ? null : fbb.writeString(object.datatype!);
          final categoryOffset = object.category == null ? null : fbb.writeString(object.category!);
          final itemsOffset = object.items == null
              ? null
              : fbb.writeList(object.items!.map(fbb.writeString).toList(growable: false));
          final textValueOffset =
              object.textValue == null ? null : fbb.writeString(object.textValue!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, fieldOffset);
          fbb.addOffset(2, datatypeOffset);
          fbb.addOffset(3, categoryOffset);
          fbb.addBool(4, object.isWithSKU);
          fbb.addBool(5, object.isTitleCase);
          fbb.addBool(6, object.isBg);
          fbb.addBool(7, object.lockable);
          fbb.addInt64(8, object.order);
          fbb.addOffset(9, itemsOffset);
          fbb.addOffset(10, textValueOffset);
          fbb.addBool(11, object.locked);
          fbb.addInt64(12, object.updateTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updateTimeValue = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final fieldParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final datatypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final isWithSKUParam = const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12);
          final isTitleCaseParam = const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final isBgParam = const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final lockableParam = const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final orderParam = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final itemsParam =
              const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final textValueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final lockedParam = const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final updateTimeParam =
              updateTimeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(updateTimeValue);
          final object = InputFieldsObjectBoxModel(
              id: idParam,
              field: fieldParam,
              datatype: datatypeParam,
              category: categoryParam,
              isWithSKU: isWithSKUParam,
              isTitleCase: isTitleCaseParam,
              isBg: isBgParam,
              lockable: lockableParam,
              order: orderParam,
              items: itemsParam,
              textValue: textValueParam,
              locked: lockedParam,
              updateTime: updateTimeParam);

          return object;
        }),
    ProductObjectBoxModel: obx_int.EntityDefinition<ProductObjectBoxModel>(
        model: _entities[2],
        toOneRelations: (ProductObjectBoxModel object) => [],
        toManyRelations: (ProductObjectBoxModel object) => {},
        getId: (ProductObjectBoxModel object) => object.id,
        setId: (ProductObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (ProductObjectBoxModel object, fb.Builder fbb) {
          final categoryOffset = object.category == null ? null : fbb.writeString(object.category!);
          final skuOffset = object.sku == null ? null : fbb.writeString(object.sku!);
          final makeOffset = object.make == null ? null : fbb.writeString(object.make!);
          final modelOffset = object.model == null ? null : fbb.writeString(object.model!);
          final processorOffset =
              object.processor == null ? null : fbb.writeString(object.processor!);
          final ramOffset = object.ram == null ? null : fbb.writeString(object.ram!);
          final storageOffset = object.storage == null ? null : fbb.writeString(object.storage!);
          final screenResolutionOffset =
              object.screenResolution == null ? null : fbb.writeString(object.screenResolution!);
          final osOffset = object.os == null ? null : fbb.writeString(object.os!);
          final screenSizeOffset =
              object.screenSize == null ? null : fbb.writeString(object.screenSize!);
          final usbCOffset = object.usbC == null ? null : fbb.writeString(object.usbC!);
          final hdmiOffset = object.hdmi == null ? null : fbb.writeString(object.hdmi!);
          final displayPortOffset =
              object.displayPort == null ? null : fbb.writeString(object.displayPort!);
          final vgaOffset = object.vga == null ? null : fbb.writeString(object.vga!);
          final ethernetOffset = object.ethernet == null ? null : fbb.writeString(object.ethernet!);
          final usbAOffset = object.usbA == null ? null : fbb.writeString(object.usbA!);
          final typeOffset = object.type == null ? null : fbb.writeString(object.type!);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.addOffset(2, skuOffset);
          fbb.addOffset(3, makeOffset);
          fbb.addOffset(4, modelOffset);
          fbb.addOffset(5, processorOffset);
          fbb.addOffset(6, ramOffset);
          fbb.addOffset(7, storageOffset);
          fbb.addOffset(8, screenResolutionOffset);
          fbb.addOffset(9, osOffset);
          fbb.addOffset(10, screenSizeOffset);
          fbb.addOffset(11, usbCOffset);
          fbb.addOffset(12, hdmiOffset);
          fbb.addOffset(13, displayPortOffset);
          fbb.addOffset(14, vgaOffset);
          fbb.addOffset(15, ethernetOffset);
          fbb.addOffset(16, usbAOffset);
          fbb.addOffset(17, typeOffset);
          fbb.addInt64(18, object.updateTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updateTimeValue = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40);
          final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final makeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final processorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final ramParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final storageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final screenResolutionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final osParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final screenSizeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final usbCParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final hdmiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final displayPortParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final vgaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final ethernetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final usbAParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final updateTimeParam =
              updateTimeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(updateTimeValue);
          final object = ProductObjectBoxModel(
              id: idParam,
              category: categoryParam,
              sku: skuParam,
              make: makeParam,
              model: modelParam,
              processor: processorParam,
              ram: ramParam,
              storage: storageParam,
              screenResolution: screenResolutionParam,
              os: osParam,
              screenSize: screenSizeParam,
              usbC: usbCParam,
              hdmi: hdmiParam,
              displayPort: displayPortParam,
              vga: vgaParam,
              ethernet: ethernetParam,
              usbA: usbAParam,
              type: typeParam,
              updateTime: updateTimeParam);

          return object;
        }),
    StockLocationHistoryObjectBoxModel:
        obx_int.EntityDefinition<StockLocationHistoryObjectBoxModel>(
            model: _entities[3],
            toOneRelations: (StockLocationHistoryObjectBoxModel object) => [],
            toManyRelations: (StockLocationHistoryObjectBoxModel object) => {},
            getId: (StockLocationHistoryObjectBoxModel object) => object.id,
            setId: (StockLocationHistoryObjectBoxModel object, int id) {
              object.id = id;
            },
            objectToFB: (StockLocationHistoryObjectBoxModel object, fb.Builder fbb) {
              final itemIdOffset = object.itemId == null ? null : fbb.writeString(object.itemId!);
              final containerIdOffset =
                  object.containerId == null ? null : fbb.writeString(object.containerId!);
              final warehouseLocationOffset = object.warehouseLocation == null
                  ? null
                  : fbb.writeString(object.warehouseLocation!);
              final commentsOffset =
                  object.comments == null ? null : fbb.writeString(object.comments!);
              final staffOffset = object.staff == null ? null : fbb.writeString(object.staff!);
              fbb.startTable(8);
              fbb.addInt64(0, object.id);
              fbb.addInt64(1, object.date.millisecondsSinceEpoch);
              fbb.addOffset(2, itemIdOffset);
              fbb.addOffset(3, containerIdOffset);
              fbb.addOffset(4, warehouseLocationOffset);
              fbb.addOffset(5, commentsOffset);
              fbb.addOffset(6, staffOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final dateParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
              final itemIdParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
              final containerIdParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
              final warehouseLocationParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
              final commentsParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
              final staffParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
              final object = StockLocationHistoryObjectBoxModel(
                  id: idParam,
                  date: dateParam,
                  itemId: itemIdParam,
                  containerId: containerIdParam,
                  warehouseLocation: warehouseLocationParam,
                  comments: commentsParam,
                  staff: staffParam);

              return object;
            }),
    StockObjectBoxModel: obx_int.EntityDefinition<StockObjectBoxModel>(
        model: _entities[4],
        toOneRelations: (StockObjectBoxModel object) => [],
        toManyRelations: (StockObjectBoxModel object) => {},
        getId: (StockObjectBoxModel object) => object.id,
        setId: (StockObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (StockObjectBoxModel object, fb.Builder fbb) {
          final categoryOffset = object.category == null ? null : fbb.writeString(object.category!);
          final itemIdOffset = object.itemId == null ? null : fbb.writeString(object.itemId!);
          final serialNumberOffset =
              object.serialNumber == null ? null : fbb.writeString(object.serialNumber!);
          final skuOffset = object.sku == null ? null : fbb.writeString(object.sku!);
          final makeOffset = object.make == null ? null : fbb.writeString(object.make!);
          final modelOffset = object.model == null ? null : fbb.writeString(object.model!);
          final processorOffset =
              object.processor == null ? null : fbb.writeString(object.processor!);
          final ramOffset = object.ram == null ? null : fbb.writeString(object.ram!);
          final storageOffset = object.storage == null ? null : fbb.writeString(object.storage!);
          final screenResolutionOffset =
              object.screenResolution == null ? null : fbb.writeString(object.screenResolution!);
          final osOffset = object.os == null ? null : fbb.writeString(object.os!);
          final screenSizeOffset =
              object.screenSize == null ? null : fbb.writeString(object.screenSize!);
          final usbCOffset = object.usbC == null ? null : fbb.writeString(object.usbC!);
          final hdmiOffset = object.hdmi == null ? null : fbb.writeString(object.hdmi!);
          final displayPortOffset =
              object.displayPort == null ? null : fbb.writeString(object.displayPort!);
          final vgaOffset = object.vga == null ? null : fbb.writeString(object.vga!);
          final ethernetOffset = object.ethernet == null ? null : fbb.writeString(object.ethernet!);
          final usbAOffset = object.usbA == null ? null : fbb.writeString(object.usbA!);
          final typeOffset = object.type == null ? null : fbb.writeString(object.type!);
          final supplierInfoOffset =
              object.supplierInfo == null ? null : fbb.writeString(object.supplierInfo!);
          final dispatchInfoOffset =
              object.dispatchInfo == null ? null : fbb.writeString(object.dispatchInfo!);
          final containerIdOffset =
              object.containerId == null ? null : fbb.writeString(object.containerId!);
          final warehouseLocationOffset =
              object.warehouseLocation == null ? null : fbb.writeString(object.warehouseLocation!);
          final commentsOffset = object.comments == null ? null : fbb.writeString(object.comments!);
          final staffOffset = object.staff == null ? null : fbb.writeString(object.staff!);
          fbb.startTable(30);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addOffset(2, categoryOffset);
          fbb.addOffset(3, itemIdOffset);
          fbb.addOffset(4, serialNumberOffset);
          fbb.addOffset(5, skuOffset);
          fbb.addOffset(6, makeOffset);
          fbb.addOffset(7, modelOffset);
          fbb.addOffset(8, processorOffset);
          fbb.addOffset(9, ramOffset);
          fbb.addOffset(10, storageOffset);
          fbb.addOffset(11, screenResolutionOffset);
          fbb.addOffset(12, osOffset);
          fbb.addOffset(13, screenSizeOffset);
          fbb.addOffset(14, usbCOffset);
          fbb.addOffset(15, hdmiOffset);
          fbb.addOffset(16, displayPortOffset);
          fbb.addOffset(17, vgaOffset);
          fbb.addOffset(18, ethernetOffset);
          fbb.addOffset(19, usbAOffset);
          fbb.addOffset(20, typeOffset);
          fbb.addOffset(21, supplierInfoOffset);
          fbb.addOffset(22, dispatchInfoOffset);
          fbb.addOffset(23, containerIdOffset);
          fbb.addOffset(24, warehouseLocationOffset);
          fbb.addOffset(25, commentsOffset);
          fbb.addOffset(26, staffOffset);
          fbb.addBool(27, object.archived);
          fbb.addInt64(28, object.updateTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updateTimeValue = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final itemIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final serialNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final makeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final processorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final ramParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final storageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final screenResolutionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final osParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final screenSizeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final usbCParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final hdmiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final displayPortParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final vgaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final ethernetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final usbAParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 44);
          final supplierInfoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 46);
          final dispatchInfoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 48);
          final containerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 50);
          final warehouseLocationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final commentsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 54);
          final staffParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 56);
          final archivedParam = const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 58);
          final updateTimeParam =
              updateTimeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(updateTimeValue);
          final object = StockObjectBoxModel(
              id: idParam,
              date: dateParam,
              category: categoryParam,
              itemId: itemIdParam,
              serialNumber: serialNumberParam,
              sku: skuParam,
              make: makeParam,
              model: modelParam,
              processor: processorParam,
              ram: ramParam,
              storage: storageParam,
              screenResolution: screenResolutionParam,
              os: osParam,
              screenSize: screenSizeParam,
              usbC: usbCParam,
              hdmi: hdmiParam,
              displayPort: displayPortParam,
              vga: vgaParam,
              ethernet: ethernetParam,
              usbA: usbAParam,
              type: typeParam,
              supplierInfo: supplierInfoParam,
              dispatchInfo: dispatchInfoParam,
              containerId: containerIdParam,
              warehouseLocation: warehouseLocationParam,
              comments: commentsParam,
              staff: staffParam,
              archived: archivedParam,
              updateTime: updateTimeParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CategoryObjectBoxModel] entity fields to define ObjectBox queries.
class CategoryModel_ {
  /// see [CategoryObjectBoxModel.id]
  static final id = obx.QueryIntegerProperty<CategoryObjectBoxModel>(_entities[0].properties[0]);

  /// see [CategoryObjectBoxModel.category]
  static final category =
      obx.QueryStringProperty<CategoryObjectBoxModel>(_entities[0].properties[1]);

  /// see [CategoryObjectBoxModel.ref]
  static final ref = obx.QueryStringProperty<CategoryObjectBoxModel>(_entities[0].properties[2]);

  /// see [CategoryObjectBoxModel.updateTime]
  static final updateTime =
      obx.QueryDateProperty<CategoryObjectBoxModel>(_entities[0].properties[3]);
}

/// [InputFieldsObjectBoxModel] entity fields to define ObjectBox queries.
class InputFieldsModel_ {
  /// see [InputFieldsObjectBoxModel.id]
  static final id = obx.QueryIntegerProperty<InputFieldsObjectBoxModel>(_entities[1].properties[0]);

  /// see [InputFieldsObjectBoxModel.field]
  static final field =
      obx.QueryStringProperty<InputFieldsObjectBoxModel>(_entities[1].properties[1]);

  /// see [InputFieldsObjectBoxModel.datatype]
  static final datatype =
      obx.QueryStringProperty<InputFieldsObjectBoxModel>(_entities[1].properties[2]);

  /// see [InputFieldsObjectBoxModel.category]
  static final category =
      obx.QueryStringProperty<InputFieldsObjectBoxModel>(_entities[1].properties[3]);

  /// see [InputFieldsObjectBoxModel.isWithSKU]
  static final isWithSKU =
      obx.QueryBooleanProperty<InputFieldsObjectBoxModel>(_entities[1].properties[4]);

  /// see [InputFieldsObjectBoxModel.isTitleCase]
  static final isTitleCase =
      obx.QueryBooleanProperty<InputFieldsObjectBoxModel>(_entities[1].properties[5]);

  /// see [InputFieldsObjectBoxModel.isBg]
  static final isBg =
      obx.QueryBooleanProperty<InputFieldsObjectBoxModel>(_entities[1].properties[6]);

  /// see [InputFieldsObjectBoxModel.lockable]
  static final lockable =
      obx.QueryBooleanProperty<InputFieldsObjectBoxModel>(_entities[1].properties[7]);

  /// see [InputFieldsObjectBoxModel.order]
  static final order =
      obx.QueryIntegerProperty<InputFieldsObjectBoxModel>(_entities[1].properties[8]);

  /// see [InputFieldsObjectBoxModel.items]
  static final items =
      obx.QueryStringVectorProperty<InputFieldsObjectBoxModel>(_entities[1].properties[9]);

  /// see [InputFieldsObjectBoxModel.textValue]
  static final textValue =
      obx.QueryStringProperty<InputFieldsObjectBoxModel>(_entities[1].properties[10]);

  /// see [InputFieldsObjectBoxModel.locked]
  static final locked =
      obx.QueryBooleanProperty<InputFieldsObjectBoxModel>(_entities[1].properties[11]);

  /// see [InputFieldsObjectBoxModel.updateTime]
  static final updateTime =
      obx.QueryDateProperty<InputFieldsObjectBoxModel>(_entities[1].properties[12]);
}

/// [ProductObjectBoxModel] entity fields to define ObjectBox queries.
class ProductModel_ {
  /// see [ProductObjectBoxModel.id]
  static final id = obx.QueryIntegerProperty<ProductObjectBoxModel>(_entities[2].properties[0]);

  /// see [ProductObjectBoxModel.category]
  static final category =
      obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[1]);

  /// see [ProductObjectBoxModel.sku]
  static final sku = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[2]);

  /// see [ProductObjectBoxModel.make]
  static final make = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[3]);

  /// see [ProductObjectBoxModel.model]
  static final model = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[4]);

  /// see [ProductObjectBoxModel.processor]
  static final processor =
      obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[5]);

  /// see [ProductObjectBoxModel.ram]
  static final ram = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[6]);

  /// see [ProductObjectBoxModel.storage]
  static final storage = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[7]);

  /// see [ProductObjectBoxModel.screenResolution]
  static final screenResolution =
      obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[8]);

  /// see [ProductObjectBoxModel.os]
  static final os = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[9]);

  /// see [ProductObjectBoxModel.screenSize]
  static final screenSize =
      obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[10]);

  /// see [ProductObjectBoxModel.usbC]
  static final usbC = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[11]);

  /// see [ProductObjectBoxModel.hdmi]
  static final hdmi = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[12]);

  /// see [ProductObjectBoxModel.displayPort]
  static final displayPort =
      obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[13]);

  /// see [ProductObjectBoxModel.vga]
  static final vga = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[14]);

  /// see [ProductObjectBoxModel.ethernet]
  static final ethernet =
      obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[15]);

  /// see [ProductObjectBoxModel.usbA]
  static final usbA = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[16]);

  /// see [ProductObjectBoxModel.type]
  static final type = obx.QueryStringProperty<ProductObjectBoxModel>(_entities[2].properties[17]);

  /// see [ProductObjectBoxModel.updateTime]
  static final updateTime =
      obx.QueryDateProperty<ProductObjectBoxModel>(_entities[2].properties[18]);
}

/// [StockLocationHistoryObjectBoxModel] entity fields to define ObjectBox queries.
class StockLocationHistoryModel_ {
  /// see [StockLocationHistoryObjectBoxModel.id]
  static final id =
      obx.QueryIntegerProperty<StockLocationHistoryObjectBoxModel>(_entities[3].properties[0]);

  /// see [StockLocationHistoryObjectBoxModel.date]
  static final date =
      obx.QueryDateProperty<StockLocationHistoryObjectBoxModel>(_entities[3].properties[1]);

  /// see [StockLocationHistoryObjectBoxModel.itemId]
  static final itemId =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(_entities[3].properties[2]);

  /// see [StockLocationHistoryObjectBoxModel.containerId]
  static final containerId =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(_entities[3].properties[3]);

  /// see [StockLocationHistoryObjectBoxModel.warehouseLocation]
  static final warehouseLocation =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(_entities[3].properties[4]);

  /// see [StockLocationHistoryObjectBoxModel.comments]
  static final comments =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(_entities[3].properties[5]);

  /// see [StockLocationHistoryObjectBoxModel.staff]
  static final staff =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(_entities[3].properties[6]);
}

/// [StockObjectBoxModel] entity fields to define ObjectBox queries.
class StockModel_ {
  /// see [StockObjectBoxModel.id]
  static final id = obx.QueryIntegerProperty<StockObjectBoxModel>(_entities[4].properties[0]);

  /// see [StockObjectBoxModel.date]
  static final date = obx.QueryDateProperty<StockObjectBoxModel>(_entities[4].properties[1]);

  /// see [StockObjectBoxModel.category]
  static final category = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[2]);

  /// see [StockObjectBoxModel.itemId]
  static final itemId = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[3]);

  /// see [StockObjectBoxModel.serialNumber]
  static final serialNumber =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[4]);

  /// see [StockObjectBoxModel.sku]
  static final sku = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[5]);

  /// see [StockObjectBoxModel.make]
  static final make = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[6]);

  /// see [StockObjectBoxModel.model]
  static final model = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[7]);

  /// see [StockObjectBoxModel.processor]
  static final processor = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[8]);

  /// see [StockObjectBoxModel.ram]
  static final ram = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[9]);

  /// see [StockObjectBoxModel.storage]
  static final storage = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[10]);

  /// see [StockObjectBoxModel.screenResolution]
  static final screenResolution =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[11]);

  /// see [StockObjectBoxModel.os]
  static final os = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[12]);

  /// see [StockObjectBoxModel.screenSize]
  static final screenSize =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[13]);

  /// see [StockObjectBoxModel.usbC]
  static final usbC = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[14]);

  /// see [StockObjectBoxModel.hdmi]
  static final hdmi = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[15]);

  /// see [StockObjectBoxModel.displayPort]
  static final displayPort =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[16]);

  /// see [StockObjectBoxModel.vga]
  static final vga = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[17]);

  /// see [StockObjectBoxModel.ethernet]
  static final ethernet = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[18]);

  /// see [StockObjectBoxModel.usbA]
  static final usbA = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[19]);

  /// see [StockObjectBoxModel.type]
  static final type = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[20]);

  /// see [StockObjectBoxModel.supplierInfo]
  static final supplierInfo =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[21]);

  /// see [StockObjectBoxModel.dispatchInfo]
  static final dispatchInfo =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[22]);

  /// see [StockObjectBoxModel.containerId]
  static final containerId =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[23]);

  /// see [StockObjectBoxModel.warehouseLocation]
  static final warehouseLocation =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[24]);

  /// see [StockObjectBoxModel.comments]
  static final comments = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[25]);

  /// see [StockObjectBoxModel.staff]
  static final staff = obx.QueryStringProperty<StockObjectBoxModel>(_entities[4].properties[26]);

  /// see [StockObjectBoxModel.archived]
  static final archived =
      obx.QueryBooleanProperty<StockObjectBoxModel>(_entities[4].properties[27]);

  /// see [StockObjectBoxModel.updateTime]
  static final updateTime = obx.QueryDateProperty<StockObjectBoxModel>(_entities[4].properties[28]);
}
