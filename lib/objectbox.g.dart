// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/data/local_database/models/category_objectbox_model.dart';
import 'core/data/local_database/models/container_id_objectbox_model.dart';
import 'core/data/local_database/models/input_fields_objectbox_model.dart';
import 'core/data/local_database/models/item_id_objectbox_model.dart';
import 'core/data/local_database/models/product_objectbox_model.dart';
import 'core/data/local_database/models/stock_location_history_objectbox_model.dart';
import 'core/data/local_database/models/stock_objectbox_model.dart';
import 'core/data/local_database/models/warehouse_location_id_objectbox_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 3279551612065122085),
      name: 'CategoryObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(5, 7815811777297089635),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4403181726243648539),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8861508340603668137),
            name: 'category',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 8485441126565221193),
      name: 'InputFieldsObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(20, 537573702557444),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8045295451714285725),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5451891932923467615),
            name: 'field',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4145791479446149695),
            name: 'datatype',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8175046254736736363),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7145276315578964431),
            name: 'order',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5734890730584549242),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 407951297339785048),
            name: 'inSku',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 834161062477752988),
            name: 'isBackground',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 6478709422358552384),
            name: 'isLockable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8413835941047047279),
            name: 'nameCase',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2788542320731150071),
            name: 'valueCase',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 537573702557444),
            name: 'items',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 7878301964298954903),
      name: 'StockLocationHistoryObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(13, 3283296695983698789),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6915762631601158155),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1537646992710910879),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 330965801336816986),
            name: 'containerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6104919663265641752),
            name: 'staff',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1207177273672419404),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5063706353912211007),
            name: 'items',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7969739137674007997),
            name: 'warehouseLocationId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1813318769925472317),
            name: 'moveType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6265414374706244787),
            name: 'state',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3283296695983698789),
            name: 'groupId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 5281460078578457063),
      name: 'StockObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(30, 4331176590220757613),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7020731462045766427),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6387853620102777327),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2547087316281728667),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2029189865663734617),
            name: 'itemId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9048610260798561663),
            name: 'serialNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4307693110479034568),
            name: 'sku',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3670042484286019713),
            name: 'make',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5341050371797736631),
            name: 'model',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 76197409361200103),
            name: 'processor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7997333294947764022),
            name: 'ram',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2791513486043063712),
            name: 'storage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2452518765064635007),
            name: 'screenResolution',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4698308498316394995),
            name: 'os',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3336657640557653961),
            name: 'screenSize',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7840287659796049751),
            name: 'usbC',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7335928913386589045),
            name: 'hdmi',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2636875153048060532),
            name: 'displayPort',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 8511038597848960965),
            name: 'vga',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 909524369452579391),
            name: 'ethernet',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 6882026027547946943),
            name: 'usbA',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2119277492553071361),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 8520733399935372001),
            name: 'supplierInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 5806125914537044538),
            name: 'dispatchInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 589685530112799733),
            name: 'containerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 2324248722440631036),
            name: 'warehouseLocation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 46880092172569087),
            name: 'comments',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 8101044747573957541),
            name: 'staff',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 3097616630526892076),
            name: 'archived',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 5449841582608409634),
            name: 'updateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 4331176590220757613),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 1221214447477733281),
      name: 'ContainerIdObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(6, 3487125614408948359),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3707360942549200141),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5958765478249987092),
            name: 'containerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 133396943923725028),
            name: 'warehouseLocationId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3487125614408948359),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 6442862417131488460),
      name: 'ItemIdObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(6, 1666409355710171445),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7274390621435172253),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3891850740529716294),
            name: 'itemId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 867217177621121490),
            name: 'containerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9097169230263661130),
            name: 'docRef',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1666409355710171445),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 5966558177066967921),
      name: 'WarehouseLocationIdObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(2, 1380821111038884014),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2151724383836186674),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1380821111038884014),
            name: 'warehouseLocationId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 1053905160877366072),
      name: 'ProductObjectBoxModel',
      lastPropertyId: const obx_int.IdUid(6, 3444039455935023531),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8314304793987279081),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6223664786166229450),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3460663666369253889),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7915587844625991974),
            name: 'sku',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 780212064423857148),
            name: 'fields',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3444039455935023531),
            name: 'values',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(14, 1053905160877366072),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        115768193643236440,
        4498366187129196935,
        4941576589595947486,
        4006601827538858093,
        1822525163420425049,
        4141691065785177202
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2247178619311132399,
        2713008352137297076,
        8649976572082106997,
        8748949600333974867,
        202435983539514328,
        8355494844896868735,
        5431476710661053420,
        3539373982214706512,
        4470135786161090218,
        6739491182670368323,
        6283435366312830352,
        8346731166956904133,
        3715218025783938920,
        4513509928408335197,
        5423410102377221427,
        388221934445529623,
        3745156033302547545,
        5274888884826195896,
        8777189826031002536,
        738290895404256581,
        6330953894352556664,
        8392276463018327300,
        8500910074651380537,
        2880259993092890974,
        6935748556222125260,
        3262062846147267361,
        5329897367482510061,
        662767557113346718,
        4736497072061183312,
        1271629750915986512,
        3257516387398194714,
        9176844804407090362,
        6067529247810517105,
        4538766512240501477,
        3935932613264492070,
        2508515853086180317,
        301330922450907131,
        8435503500090402605,
        68093823571291223,
        3282212939916168277,
        4994565927406361783,
        6183930038347003600,
        1901759616111056195,
        5882788199714033951,
        1227644137036014803,
        4136787169351185914,
        1790521698418551855,
        8199663530700390218,
        3006258940614161502,
        313382672128181047,
        480764611909005632,
        2612476791207485515,
        2188153453481376796,
        2989890264290627151,
        8688039732898311962,
        4703379804524044207,
        8764344677090561810,
        3019417299759924292,
        3163158103847927562,
        2699716490522283531,
        9204905606121712460,
        8153688700414077519,
        3219585842847679378,
        9212589769775811006,
        8843852649042032310,
        4346226259510496964,
        6219449817307617880,
        8500558903919383482,
        8320200346754956927,
        541858986232586884,
        4231092600033086896,
        4244842460663819587,
        231179492036876718,
        7716995902251311121,
        5633997830570794166,
        4784750344366697416,
        3826584008350673828,
        4073146702958889894,
        4178211538062615691,
        3467964010716723111,
        3417742199554809307,
        1192272342135156638,
        5172208356487940317,
        1253580881841840002,
        6143414728452045584,
        6136831421646016040,
        2204498220852388215,
        513454205277183482,
        7815811777297089635,
        4867700781495511551,
        68752794182575786,
        5009878696016247992,
        6965238397085432491,
        872602155445678901,
        4633781764111584761,
        3695794870824581208,
        8739530616706670194,
        2768502660731652685,
        7546774662602217803,
        4172629010360625579,
        2857939984383049966,
        4941206609568062546,
        7543440560317797966,
        6180002008552014100,
        1562521085325068343,
        6571185623631512187,
        8826964254478115820,
        748087498145807481,
        4022381446667231775
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CategoryObjectBoxModel: obx_int.EntityDefinition<CategoryObjectBoxModel>(
        model: _entities[0],
        toOneRelations: (CategoryObjectBoxModel object) => [],
        toManyRelations: (CategoryObjectBoxModel object) => {},
        getId: (CategoryObjectBoxModel object) => object.id,
        setId: (CategoryObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryObjectBoxModel object, fb.Builder fbb) {
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final object =
              CategoryObjectBoxModel(id: idParam, category: categoryParam);

          return object;
        }),
    InputFieldsObjectBoxModel: obx_int.EntityDefinition<
            InputFieldsObjectBoxModel>(
        model: _entities[1],
        toOneRelations: (InputFieldsObjectBoxModel object) => [],
        toManyRelations: (InputFieldsObjectBoxModel object) => {},
        getId: (InputFieldsObjectBoxModel object) => object.id,
        setId: (InputFieldsObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (InputFieldsObjectBoxModel object, fb.Builder fbb) {
          final fieldOffset =
              object.field == null ? null : fbb.writeString(object.field!);
          final datatypeOffset = object.datatype == null
              ? null
              : fbb.writeString(object.datatype!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final nameCaseOffset = object.nameCase == null
              ? null
              : fbb.writeString(object.nameCase!);
          final valueCaseOffset = object.valueCase == null
              ? null
              : fbb.writeString(object.valueCase!);
          final itemsOffset = object.items == null
              ? null
              : fbb.writeList(
                  object.items!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, fieldOffset);
          fbb.addOffset(2, datatypeOffset);
          fbb.addOffset(3, categoryOffset);
          fbb.addInt64(8, object.order);
          fbb.addOffset(13, uidOffset);
          fbb.addBool(14, object.inSku);
          fbb.addBool(15, object.isBackground);
          fbb.addBool(16, object.isLockable);
          fbb.addOffset(17, nameCaseOffset);
          fbb.addOffset(18, valueCaseOffset);
          fbb.addOffset(19, itemsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final fieldParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final datatypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final inSkuParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final isBackgroundParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34);
          final isLockableParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36);
          final itemsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 42);
          final nameCaseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final valueCaseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final orderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = InputFieldsObjectBoxModel(
              id: idParam,
              uid: uidParam,
              field: fieldParam,
              category: categoryParam,
              datatype: datatypeParam,
              inSku: inSkuParam,
              isBackground: isBackgroundParam,
              isLockable: isLockableParam,
              items: itemsParam,
              nameCase: nameCaseParam,
              valueCase: valueCaseParam,
              order: orderParam);

          return object;
        }),
    StockLocationHistoryObjectBoxModel: obx_int.EntityDefinition<
            StockLocationHistoryObjectBoxModel>(
        model: _entities[2],
        toOneRelations: (StockLocationHistoryObjectBoxModel object) => [],
        toManyRelations: (StockLocationHistoryObjectBoxModel object) => {},
        getId: (StockLocationHistoryObjectBoxModel object) => object.id,
        setId: (StockLocationHistoryObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB:
            (StockLocationHistoryObjectBoxModel object, fb.Builder fbb) {
          final containerIdOffset = object.containerId == null
              ? null
              : fbb.writeString(object.containerId!);
          final staffOffset =
              object.staff == null ? null : fbb.writeString(object.staff!);
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final itemsOffset = object.items == null
              ? null
              : fbb.writeList(
                  object.items!.map(fbb.writeString).toList(growable: false));
          final warehouseLocationIdOffset = object.warehouseLocationId == null
              ? null
              : fbb.writeString(object.warehouseLocationId!);
          final moveTypeOffset = object.moveType == null
              ? null
              : fbb.writeString(object.moveType!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addOffset(3, containerIdOffset);
          fbb.addOffset(6, staffOffset);
          fbb.addOffset(7, uidOffset);
          fbb.addOffset(8, itemsOffset);
          fbb.addOffset(9, warehouseLocationIdOffset);
          fbb.addOffset(10, moveTypeOffset);
          fbb.addOffset(11, stateOffset);
          fbb.addOffset(12, groupIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final groupIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final itemsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 20);
          final containerIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final warehouseLocationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final moveTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final stateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final staffParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = StockLocationHistoryObjectBoxModel(
              id: idParam,
              uid: uidParam,
              date: dateParam,
              groupId: groupIdParam,
              items: itemsParam,
              containerId: containerIdParam,
              warehouseLocationId: warehouseLocationIdParam,
              moveType: moveTypeParam,
              state: stateParam,
              staff: staffParam);

          return object;
        }),
    StockObjectBoxModel: obx_int.EntityDefinition<StockObjectBoxModel>(
        model: _entities[3],
        toOneRelations: (StockObjectBoxModel object) => [],
        toManyRelations: (StockObjectBoxModel object) => {},
        getId: (StockObjectBoxModel object) => object.id,
        setId: (StockObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (StockObjectBoxModel object, fb.Builder fbb) {
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final itemIdOffset =
              object.itemId == null ? null : fbb.writeString(object.itemId!);
          final serialNumberOffset = object.serialNumber == null
              ? null
              : fbb.writeString(object.serialNumber!);
          final skuOffset =
              object.sku == null ? null : fbb.writeString(object.sku!);
          final makeOffset =
              object.make == null ? null : fbb.writeString(object.make!);
          final modelOffset =
              object.model == null ? null : fbb.writeString(object.model!);
          final processorOffset = object.processor == null
              ? null
              : fbb.writeString(object.processor!);
          final ramOffset =
              object.ram == null ? null : fbb.writeString(object.ram!);
          final storageOffset =
              object.storage == null ? null : fbb.writeString(object.storage!);
          final screenResolutionOffset = object.screenResolution == null
              ? null
              : fbb.writeString(object.screenResolution!);
          final osOffset =
              object.os == null ? null : fbb.writeString(object.os!);
          final screenSizeOffset = object.screenSize == null
              ? null
              : fbb.writeString(object.screenSize!);
          final usbCOffset =
              object.usbC == null ? null : fbb.writeString(object.usbC!);
          final hdmiOffset =
              object.hdmi == null ? null : fbb.writeString(object.hdmi!);
          final displayPortOffset = object.displayPort == null
              ? null
              : fbb.writeString(object.displayPort!);
          final vgaOffset =
              object.vga == null ? null : fbb.writeString(object.vga!);
          final ethernetOffset = object.ethernet == null
              ? null
              : fbb.writeString(object.ethernet!);
          final usbAOffset =
              object.usbA == null ? null : fbb.writeString(object.usbA!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final supplierInfoOffset = object.supplierInfo == null
              ? null
              : fbb.writeString(object.supplierInfo!);
          final dispatchInfoOffset = object.dispatchInfo == null
              ? null
              : fbb.writeString(object.dispatchInfo!);
          final containerIdOffset = object.containerId == null
              ? null
              : fbb.writeString(object.containerId!);
          final warehouseLocationOffset = object.warehouseLocation == null
              ? null
              : fbb.writeString(object.warehouseLocation!);
          final commentsOffset = object.comments == null
              ? null
              : fbb.writeString(object.comments!);
          final staffOffset =
              object.staff == null ? null : fbb.writeString(object.staff!);
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          fbb.startTable(31);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addOffset(2, categoryOffset);
          fbb.addOffset(3, itemIdOffset);
          fbb.addOffset(4, serialNumberOffset);
          fbb.addOffset(5, skuOffset);
          fbb.addOffset(6, makeOffset);
          fbb.addOffset(7, modelOffset);
          fbb.addOffset(8, processorOffset);
          fbb.addOffset(9, ramOffset);
          fbb.addOffset(10, storageOffset);
          fbb.addOffset(11, screenResolutionOffset);
          fbb.addOffset(12, osOffset);
          fbb.addOffset(13, screenSizeOffset);
          fbb.addOffset(14, usbCOffset);
          fbb.addOffset(15, hdmiOffset);
          fbb.addOffset(16, displayPortOffset);
          fbb.addOffset(17, vgaOffset);
          fbb.addOffset(18, ethernetOffset);
          fbb.addOffset(19, usbAOffset);
          fbb.addOffset(20, typeOffset);
          fbb.addOffset(21, supplierInfoOffset);
          fbb.addOffset(22, dispatchInfoOffset);
          fbb.addOffset(23, containerIdOffset);
          fbb.addOffset(24, warehouseLocationOffset);
          fbb.addOffset(25, commentsOffset);
          fbb.addOffset(26, staffOffset);
          fbb.addBool(27, object.archived);
          fbb.addInt64(28, object.updateTime?.millisecondsSinceEpoch);
          fbb.addOffset(29, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updateTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 62);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final itemIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final serialNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final makeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final processorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final ramParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final storageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final screenResolutionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final osParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final screenSizeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final usbCParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final hdmiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final displayPortParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final vgaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final ethernetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final usbAParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 44);
          final supplierInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 46);
          final dispatchInfoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final containerIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final warehouseLocationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 52);
          final commentsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 54);
          final staffParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 56);
          final archivedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 58);
          final updateTimeParam = updateTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updateTimeValue);
          final object = StockObjectBoxModel(
              id: idParam,
              uid: uidParam,
              date: dateParam,
              category: categoryParam,
              itemId: itemIdParam,
              serialNumber: serialNumberParam,
              sku: skuParam,
              make: makeParam,
              model: modelParam,
              processor: processorParam,
              ram: ramParam,
              storage: storageParam,
              screenResolution: screenResolutionParam,
              os: osParam,
              screenSize: screenSizeParam,
              usbC: usbCParam,
              hdmi: hdmiParam,
              displayPort: displayPortParam,
              vga: vgaParam,
              ethernet: ethernetParam,
              usbA: usbAParam,
              type: typeParam,
              supplierInfo: supplierInfoParam,
              dispatchInfo: dispatchInfoParam,
              containerId: containerIdParam,
              warehouseLocation: warehouseLocationParam,
              comments: commentsParam,
              staff: staffParam,
              archived: archivedParam,
              updateTime: updateTimeParam);

          return object;
        }),
    ContainerIdObjectBoxModel:
        obx_int.EntityDefinition<ContainerIdObjectBoxModel>(
            model: _entities[4],
            toOneRelations: (ContainerIdObjectBoxModel object) => [],
            toManyRelations: (ContainerIdObjectBoxModel object) => {},
            getId: (ContainerIdObjectBoxModel object) => object.id,
            setId: (ContainerIdObjectBoxModel object, int id) {
              object.id = id;
            },
            objectToFB: (ContainerIdObjectBoxModel object, fb.Builder fbb) {
              final containerIdOffset = object.containerId == null
                  ? null
                  : fbb.writeString(object.containerId!);
              final warehouseLocationIdOffset =
                  object.warehouseLocationId == null
                      ? null
                      : fbb.writeString(object.warehouseLocationId!);
              final statusOffset = object.status == null
                  ? null
                  : fbb.writeString(object.status!);
              fbb.startTable(7);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, containerIdOffset);
              fbb.addOffset(3, warehouseLocationIdOffset);
              fbb.addOffset(5, statusOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final containerIdParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 6);
              final statusParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
              final warehouseLocationIdParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 10);
              final object = ContainerIdObjectBoxModel(
                  id: idParam,
                  containerId: containerIdParam,
                  status: statusParam,
                  warehouseLocationId: warehouseLocationIdParam);

              return object;
            }),
    ItemIdObjectBoxModel: obx_int.EntityDefinition<ItemIdObjectBoxModel>(
        model: _entities[5],
        toOneRelations: (ItemIdObjectBoxModel object) => [],
        toManyRelations: (ItemIdObjectBoxModel object) => {},
        getId: (ItemIdObjectBoxModel object) => object.id,
        setId: (ItemIdObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (ItemIdObjectBoxModel object, fb.Builder fbb) {
          final itemIdOffset =
              object.itemId == null ? null : fbb.writeString(object.itemId!);
          final containerIdOffset = object.containerId == null
              ? null
              : fbb.writeString(object.containerId!);
          final docRefOffset =
              object.docRef == null ? null : fbb.writeString(object.docRef!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, itemIdOffset);
          fbb.addOffset(2, containerIdOffset);
          fbb.addOffset(3, docRefOffset);
          fbb.addOffset(5, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final itemIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final containerIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final docRefParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ItemIdObjectBoxModel(
              id: idParam,
              itemId: itemIdParam,
              containerId: containerIdParam,
              docRef: docRefParam,
              status: statusParam);

          return object;
        }),
    WarehouseLocationIdObjectBoxModel: obx_int.EntityDefinition<
            WarehouseLocationIdObjectBoxModel>(
        model: _entities[6],
        toOneRelations: (WarehouseLocationIdObjectBoxModel object) => [],
        toManyRelations: (WarehouseLocationIdObjectBoxModel object) => {},
        getId: (WarehouseLocationIdObjectBoxModel object) => object.id,
        setId: (WarehouseLocationIdObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (WarehouseLocationIdObjectBoxModel object, fb.Builder fbb) {
          final warehouseLocationIdOffset = object.warehouseLocationId == null
              ? null
              : fbb.writeString(object.warehouseLocationId!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, warehouseLocationIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final warehouseLocationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
          final object = WarehouseLocationIdObjectBoxModel(
              id: idParam, warehouseLocationId: warehouseLocationIdParam);

          return object;
        }),
    ProductObjectBoxModel: obx_int.EntityDefinition<ProductObjectBoxModel>(
        model: _entities[7],
        toOneRelations: (ProductObjectBoxModel object) => [],
        toManyRelations: (ProductObjectBoxModel object) => {},
        getId: (ProductObjectBoxModel object) => object.id,
        setId: (ProductObjectBoxModel object, int id) {
          object.id = id;
        },
        objectToFB: (ProductObjectBoxModel object, fb.Builder fbb) {
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final skuOffset =
              object.sku == null ? null : fbb.writeString(object.sku!);
          final fieldsOffset = object.fields == null
              ? null
              : fbb.writeList(
                  object.fields!.map(fbb.writeString).toList(growable: false));
          final valuesOffset = object.values == null
              ? null
              : fbb.writeList(
                  object.values!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, categoryOffset);
          fbb.addOffset(3, skuOffset);
          fbb.addOffset(4, fieldsOffset);
          fbb.addOffset(5, valuesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final fieldsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 12);
          final valuesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ProductObjectBoxModel(
              id: idParam,
              uid: uidParam,
              category: categoryParam,
              sku: skuParam,
              fields: fieldsParam,
              values: valuesParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CategoryObjectBoxModel] entity fields to define ObjectBox queries.
class CategoryObjectBoxModel_ {
  /// See [CategoryObjectBoxModel.id].
  static final id = obx.QueryIntegerProperty<CategoryObjectBoxModel>(
      _entities[0].properties[0]);

  /// See [CategoryObjectBoxModel.category].
  static final category = obx.QueryStringProperty<CategoryObjectBoxModel>(
      _entities[0].properties[1]);
}

/// [InputFieldsObjectBoxModel] entity fields to define ObjectBox queries.
class InputFieldsObjectBoxModel_ {
  /// See [InputFieldsObjectBoxModel.id].
  static final id = obx.QueryIntegerProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[0]);

  /// See [InputFieldsObjectBoxModel.field].
  static final field = obx.QueryStringProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[1]);

  /// See [InputFieldsObjectBoxModel.datatype].
  static final datatype = obx.QueryStringProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[2]);

  /// See [InputFieldsObjectBoxModel.category].
  static final category = obx.QueryStringProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[3]);

  /// See [InputFieldsObjectBoxModel.order].
  static final order = obx.QueryIntegerProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[4]);

  /// See [InputFieldsObjectBoxModel.uid].
  static final uid = obx.QueryStringProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[5]);

  /// See [InputFieldsObjectBoxModel.inSku].
  static final inSku = obx.QueryBooleanProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[6]);

  /// See [InputFieldsObjectBoxModel.isBackground].
  static final isBackground =
      obx.QueryBooleanProperty<InputFieldsObjectBoxModel>(
          _entities[1].properties[7]);

  /// See [InputFieldsObjectBoxModel.isLockable].
  static final isLockable = obx.QueryBooleanProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[8]);

  /// See [InputFieldsObjectBoxModel.nameCase].
  static final nameCase = obx.QueryStringProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[9]);

  /// See [InputFieldsObjectBoxModel.valueCase].
  static final valueCase = obx.QueryStringProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[10]);

  /// See [InputFieldsObjectBoxModel.items].
  static final items = obx.QueryStringVectorProperty<InputFieldsObjectBoxModel>(
      _entities[1].properties[11]);
}

/// [StockLocationHistoryObjectBoxModel] entity fields to define ObjectBox queries.
class StockLocationHistoryObjectBoxModel_ {
  /// See [StockLocationHistoryObjectBoxModel.id].
  static final id =
      obx.QueryIntegerProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[0]);

  /// See [StockLocationHistoryObjectBoxModel.date].
  static final date = obx.QueryDateProperty<StockLocationHistoryObjectBoxModel>(
      _entities[2].properties[1]);

  /// See [StockLocationHistoryObjectBoxModel.containerId].
  static final containerId =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[2]);

  /// See [StockLocationHistoryObjectBoxModel.staff].
  static final staff =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[3]);

  /// See [StockLocationHistoryObjectBoxModel.uid].
  static final uid =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[4]);

  /// See [StockLocationHistoryObjectBoxModel.items].
  static final items =
      obx.QueryStringVectorProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[5]);

  /// See [StockLocationHistoryObjectBoxModel.warehouseLocationId].
  static final warehouseLocationId =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[6]);

  /// See [StockLocationHistoryObjectBoxModel.moveType].
  static final moveType =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[7]);

  /// See [StockLocationHistoryObjectBoxModel.state].
  static final state =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[8]);

  /// See [StockLocationHistoryObjectBoxModel.groupId].
  static final groupId =
      obx.QueryStringProperty<StockLocationHistoryObjectBoxModel>(
          _entities[2].properties[9]);
}

/// [StockObjectBoxModel] entity fields to define ObjectBox queries.
class StockObjectBoxModel_ {
  /// See [StockObjectBoxModel.id].
  static final id =
      obx.QueryIntegerProperty<StockObjectBoxModel>(_entities[3].properties[0]);

  /// See [StockObjectBoxModel.date].
  static final date =
      obx.QueryDateProperty<StockObjectBoxModel>(_entities[3].properties[1]);

  /// See [StockObjectBoxModel.category].
  static final category =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[2]);

  /// See [StockObjectBoxModel.itemId].
  static final itemId =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[3]);

  /// See [StockObjectBoxModel.serialNumber].
  static final serialNumber =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[4]);

  /// See [StockObjectBoxModel.sku].
  static final sku =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[5]);

  /// See [StockObjectBoxModel.make].
  static final make =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[6]);

  /// See [StockObjectBoxModel.model].
  static final model =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[7]);

  /// See [StockObjectBoxModel.processor].
  static final processor =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[8]);

  /// See [StockObjectBoxModel.ram].
  static final ram =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[9]);

  /// See [StockObjectBoxModel.storage].
  static final storage =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[10]);

  /// See [StockObjectBoxModel.screenResolution].
  static final screenResolution =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[11]);

  /// See [StockObjectBoxModel.os].
  static final os =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[12]);

  /// See [StockObjectBoxModel.screenSize].
  static final screenSize =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[13]);

  /// See [StockObjectBoxModel.usbC].
  static final usbC =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[14]);

  /// See [StockObjectBoxModel.hdmi].
  static final hdmi =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[15]);

  /// See [StockObjectBoxModel.displayPort].
  static final displayPort =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[16]);

  /// See [StockObjectBoxModel.vga].
  static final vga =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[17]);

  /// See [StockObjectBoxModel.ethernet].
  static final ethernet =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[18]);

  /// See [StockObjectBoxModel.usbA].
  static final usbA =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[19]);

  /// See [StockObjectBoxModel.type].
  static final type =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[20]);

  /// See [StockObjectBoxModel.supplierInfo].
  static final supplierInfo =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[21]);

  /// See [StockObjectBoxModel.dispatchInfo].
  static final dispatchInfo =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[22]);

  /// See [StockObjectBoxModel.containerId].
  static final containerId =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[23]);

  /// See [StockObjectBoxModel.warehouseLocation].
  static final warehouseLocation =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[24]);

  /// See [StockObjectBoxModel.comments].
  static final comments =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[25]);

  /// See [StockObjectBoxModel.staff].
  static final staff =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[26]);

  /// See [StockObjectBoxModel.archived].
  static final archived = obx.QueryBooleanProperty<StockObjectBoxModel>(
      _entities[3].properties[27]);

  /// See [StockObjectBoxModel.updateTime].
  static final updateTime =
      obx.QueryDateProperty<StockObjectBoxModel>(_entities[3].properties[28]);

  /// See [StockObjectBoxModel.uid].
  static final uid =
      obx.QueryStringProperty<StockObjectBoxModel>(_entities[3].properties[29]);
}

/// [ContainerIdObjectBoxModel] entity fields to define ObjectBox queries.
class ContainerIdObjectBoxModel_ {
  /// See [ContainerIdObjectBoxModel.id].
  static final id = obx.QueryIntegerProperty<ContainerIdObjectBoxModel>(
      _entities[4].properties[0]);

  /// See [ContainerIdObjectBoxModel.containerId].
  static final containerId = obx.QueryStringProperty<ContainerIdObjectBoxModel>(
      _entities[4].properties[1]);

  /// See [ContainerIdObjectBoxModel.warehouseLocationId].
  static final warehouseLocationId =
      obx.QueryStringProperty<ContainerIdObjectBoxModel>(
          _entities[4].properties[2]);

  /// See [ContainerIdObjectBoxModel.status].
  static final status = obx.QueryStringProperty<ContainerIdObjectBoxModel>(
      _entities[4].properties[3]);
}

/// [ItemIdObjectBoxModel] entity fields to define ObjectBox queries.
class ItemIdObjectBoxModel_ {
  /// See [ItemIdObjectBoxModel.id].
  static final id = obx.QueryIntegerProperty<ItemIdObjectBoxModel>(
      _entities[5].properties[0]);

  /// See [ItemIdObjectBoxModel.itemId].
  static final itemId =
      obx.QueryStringProperty<ItemIdObjectBoxModel>(_entities[5].properties[1]);

  /// See [ItemIdObjectBoxModel.containerId].
  static final containerId =
      obx.QueryStringProperty<ItemIdObjectBoxModel>(_entities[5].properties[2]);

  /// See [ItemIdObjectBoxModel.docRef].
  static final docRef =
      obx.QueryStringProperty<ItemIdObjectBoxModel>(_entities[5].properties[3]);

  /// See [ItemIdObjectBoxModel.status].
  static final status =
      obx.QueryStringProperty<ItemIdObjectBoxModel>(_entities[5].properties[4]);
}

/// [WarehouseLocationIdObjectBoxModel] entity fields to define ObjectBox queries.
class WarehouseLocationIdObjectBoxModel_ {
  /// See [WarehouseLocationIdObjectBoxModel.id].
  static final id = obx.QueryIntegerProperty<WarehouseLocationIdObjectBoxModel>(
      _entities[6].properties[0]);

  /// See [WarehouseLocationIdObjectBoxModel.warehouseLocationId].
  static final warehouseLocationId =
      obx.QueryStringProperty<WarehouseLocationIdObjectBoxModel>(
          _entities[6].properties[1]);
}

/// [ProductObjectBoxModel] entity fields to define ObjectBox queries.
class ProductObjectBoxModel_ {
  /// See [ProductObjectBoxModel.id].
  static final id = obx.QueryIntegerProperty<ProductObjectBoxModel>(
      _entities[7].properties[0]);

  /// See [ProductObjectBoxModel.uid].
  static final uid = obx.QueryStringProperty<ProductObjectBoxModel>(
      _entities[7].properties[1]);

  /// See [ProductObjectBoxModel.category].
  static final category = obx.QueryStringProperty<ProductObjectBoxModel>(
      _entities[7].properties[2]);

  /// See [ProductObjectBoxModel.sku].
  static final sku = obx.QueryStringProperty<ProductObjectBoxModel>(
      _entities[7].properties[3]);

  /// See [ProductObjectBoxModel.fields].
  static final fields = obx.QueryStringVectorProperty<ProductObjectBoxModel>(
      _entities[7].properties[4]);

  /// See [ProductObjectBoxModel.values].
  static final values = obx.QueryStringVectorProperty<ProductObjectBoxModel>(
      _entities[7].properties[5]);
}
